// Code generated by smithy-go-codegen DO NOT EDIT.

package simpleunion

import (
	"github.com/Smithy-dafny/TestModels/Union/simpleunioninternaldafnytypes"
	"github.com/Smithy-dafny/TestModels/Union/simpleuniontypes"
	"github.com/dafny-lang/DafnyRuntimeGo/dafny"
	"github.com/dafny-lang/DafnyStandardLibGo/Wrappers"
)

func GetUnionInput_ToDafny(nativeInput simpleuniontypes.GetUnionInput) simpleunioninternaldafnytypes.GetUnionInput {

	return func() simpleunioninternaldafnytypes.GetUnionInput {

		return simpleunioninternaldafnytypes.Companion_GetUnionInput_.Create_GetUnionInput_(func() Wrappers.Option {
				return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOfChars([]dafny.Char("*nativeInput")...))
			}())
	}()

}

func GetUnionOutput_ToDafny(nativeOutput simpleuniontypes.GetUnionOutput) simpleunioninternaldafnytypes.GetUnionOutput {

	return func() simpleunioninternaldafnytypes.GetUnionOutput {

		return simpleunioninternaldafnytypes.Companion_GetUnionOutput_.Create_GetUnionOutput_(func() Wrappers.Option {
				return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOfChars([]dafny.Char("*nativeInput")...))
			}())
	}()

}

func GetKnownValueUnionInput_ToDafny(nativeInput simpleuniontypes.GetKnownValueUnionInput) simpleunioninternaldafnytypes.GetKnownValueUnionInput {

	return func() simpleunioninternaldafnytypes.GetKnownValueUnionInput {

		return simpleunioninternaldafnytypes.Companion_GetKnownValueUnionInput_.Create_GetKnownValueUnionInput_(func() Wrappers.Option {
				return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOfChars([]dafny.Char("*nativeInput")...))
			}())
	}()

}

func GetKnownValueUnionOutput_ToDafny(nativeOutput simpleuniontypes.GetKnownValueUnionOutput) simpleunioninternaldafnytypes.GetKnownValueUnionOutput {

	return func() simpleunioninternaldafnytypes.GetKnownValueUnionOutput {

		return simpleunioninternaldafnytypes.Companion_GetKnownValueUnionOutput_.Create_GetKnownValueUnionOutput_(func() Wrappers.Option {
				return Wrappers.Companion_Option_.Create_Some_(dafny.SeqOfChars([]dafny.Char("*nativeInput")...))
			}())
	}()

}

func CollectionOfErrors_Input_ToDafny(nativeInput simpleuniontypes.CollectionOfErrors) simpleunioninternaldafnytypes.Error {
	var e []interface{}
	for _, i2 := range nativeInput.ListOfErrors {
		e = append(e, Error_ToDafny(i2))
	}
	return simpleunioninternaldafnytypes.Companion_Error_.Create_CollectionOfErrors_(dafny.SeqOf(e...), dafny.SeqOfChars([]dafny.Char(nativeInput.Message)...))
}
func OpaqueError_Input_ToDafny(nativeInput simpleuniontypes.OpaqueError) simpleunioninternaldafnytypes.Error {
	return simpleunioninternaldafnytypes.Companion_Error_.Create_Opaque_(nativeInput.ErrObject)
}

func Error_ToDafny(err error) simpleunioninternaldafnytypes.Error {
	switch err.(type) {
	// Service Errors

	//DependentErrors

	//Unmodelled Errors
	case simpleuniontypes.CollectionOfErrors:
		return CollectionOfErrors_Input_ToDafny(err.(simpleuniontypes.CollectionOfErrors))

	default:
		// TODO: Is changing from the commented code to this new one reasonable?
		// return OpaqueError_Input_ToDafny(err.(*simpleconstraintstypes.OpaqueError))

		// TODO: why is err a pointer?
		error, ok := err.(*simpleuniontypes.OpaqueError)

		if !ok {
			panic("Error is not an OpaqueError")
		}
		if error == nil {
			panic("Error is nil")
		}
		return OpaqueError_Input_ToDafny(*error)
	}
}

func SimpleUnionConfig_ToDafny(nativeInput simpleuniontypes.SimpleUnionConfig) simpleunioninternaldafnytypes.SimpleUnionConfig {
	return func() simpleunioninternaldafnytypes.SimpleUnionConfig {

		return simpleunioninternaldafnytypes.Companion_SimpleUnionConfig_.Create_SimpleUnionConfig_()
	}()

}
