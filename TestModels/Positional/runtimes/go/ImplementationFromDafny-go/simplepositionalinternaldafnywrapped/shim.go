// Code generated by smithy-go-codegen DO NOT EDIT.

package simplepositionalinternaldafnywrapped

import (
	"context"

	"github.com/Smithy-dafny/TestModels/Positional/simplepositional"
	"github.com/Smithy-dafny/TestModels/Positional/simplepositionalinternaldafnytypes"
	"github.com/dafny-lang/DafnyStandardLibGo/Wrappers"
)

type Shim struct {
	simplepositionalinternaldafnytypes.ISimplePositionalClient
	client *simplepositional.Client
}

func WrappedSimplePositional(inputConfig simplepositionalinternaldafnytypes.SimplePositionalConfig) Wrappers.Result {
	var nativeConfig = simplepositional.SimplePositionalConfig_FromDafny(inputConfig)
	var nativeClient, nativeError = simplepositional.NewClient(nativeConfig)
	if nativeError != nil {
		return Wrappers.Companion_Result_.Create_Failure_(simplepositionalinternaldafnytypes.Companion_Error_.Create_Opaque_(nativeError))
	}
	return Wrappers.Companion_Result_.Create_Success_(&Shim{client: nativeClient})
}

func (shim *Shim) GetResource(input simplepositionalinternaldafnytypes.GetResourceInput) Wrappers.Result {
	var native_request = simplepositional.GetResourceInput_FromDafny(input)
	var native_response, native_error = shim.client.GetResource(context.Background(), native_request)
	if native_error != nil {
		return Wrappers.Companion_Result_.Create_Failure_(simplepositional.Error_ToDafny(native_error))
	}
	return Wrappers.Companion_Result_.Create_Success_(simplepositional.GetResourceOutput_ToDafny(*native_response))
}

func (shim *Shim) GetResourcePositional(input simplepositionalinternaldafnytypes.GetResourcePositionalInput) Wrappers.Result {
	var native_request = simplepositional.GetResourcePositionalInput_FromDafny(input)
	var native_response, native_error = shim.client.GetResourcePositional(context.Background(), native_request)
	if native_error != nil {
		return Wrappers.Companion_Result_.Create_Failure_(simplepositional.Error_ToDafny(native_error))
	}
	return Wrappers.Companion_Result_.Create_Success_(simplepositional.GetResourcePositionalOutput_ToDafny(*native_response))
}
