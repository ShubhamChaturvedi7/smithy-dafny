// Code generated by smithy-go-codegen DO NOT EDIT.

package simplepositional

import (
	"github.com/Smithy-dafny/TestModels/Positional/simplepositionalinternaldafnytypes"
	"github.com/Smithy-dafny/TestModels/Positional/simplepositionaltypes"
	"github.com/dafny-lang/DafnyRuntimeGo/dafny"
)

func GetResourceInput_FromDafny(dafnyInput simplepositionalinternaldafnytypes.GetResourceInput) simplepositionaltypes.GetResourceInput {

	return simplepositionaltypes.GetResourceInput{Name: func() *string {
		var s string
		if dafnyInput.Dtor_name() == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_name()); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()}

}

func GetResourceOutput_FromDafny(dafnyOutput simplepositionalinternaldafnytypes.GetResourceOutput) simplepositionaltypes.GetResourceOutput {

	return simplepositionaltypes.GetResourceOutput{Output: SimpleResource_FromDafny(dafnyOutput.Dtor_output())}

}

func GetResourcePositionalInput_FromDafny(dafnyInput dafny.Sequence) simplepositionaltypes.GetResourcePositionalInput {

	return simplepositionaltypes.GetResourcePositionalInput{Name: func() *string {
		var s string
		if dafnyInput == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()}

}

func GetNameInput_FromDafny(dafnyInput simplepositionalinternaldafnytypes.GetNameInput) simplepositionaltypes.GetNameInput {

	return simplepositionaltypes.GetNameInput{}

}

func GetNameOutput_FromDafny(dafnyOutput simplepositionalinternaldafnytypes.GetNameOutput) simplepositionaltypes.GetNameOutput {

	return simplepositionaltypes.GetNameOutput{Name: func() *string {
		var s string
		if dafnyOutput.Dtor_name() == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_name()); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()}

}

func SimpleResource_FromDafny(dafnyResource simplepositionalinternaldafnytypes.ISimpleResource) simplepositionaltypes.ISimpleResource {

	return &SimpleResource{dafnyResource}
}

func SimplePositionalException_FromDafny(dafnyOutput simplepositionalinternaldafnytypes.Error) simplepositionaltypes.SimplePositionalException {
	return simplepositionaltypes.SimplePositionalException{Message: func() *string {
		var s string
		if dafnyOutput.Dtor_message() == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_message()); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()}

}

func CollectionOfErrors_Output_FromDafny(dafnyOutput simplepositionalinternaldafnytypes.Error) simplepositionaltypes.CollectionOfErrors {
	listOfErrors := dafnyOutput.Dtor_list()
	message := dafnyOutput.Dtor_message()
	t := simplepositionaltypes.CollectionOfErrors{}
	for i := dafny.Iterate(listOfErrors); ; {
		val, ok := i()
		if !ok {
			break
		}
		err := val.(simplepositionalinternaldafnytypes.Error)
		t.ListOfErrors = append(t.ListOfErrors, Error_FromDafny(err))

	}
	t.Message = func() string {
		var s string
		for i := dafny.Iterate(message); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
	return t
}
func OpaqueError_Output_FromDafny(dafnyOutput simplepositionalinternaldafnytypes.Error) simplepositionaltypes.OpaqueError {
	return simplepositionaltypes.OpaqueError{
		ErrObject: dafnyOutput.Dtor_obj(),
	}
}

func Error_FromDafny(err simplepositionalinternaldafnytypes.Error) error {
	// Service Errors
	if err.Is_SimplePositionalException() {
		return SimplePositionalException_FromDafny(err)
	}

	//DependentErrors

	//Unmodelled Errors
	if err.Is_CollectionOfErrors() {
		return CollectionOfErrors_Output_FromDafny(err)
	}

	return OpaqueError_Output_FromDafny(err)
}

func SimplePositionalConfig_FromDafny(dafnyOutput simplepositionalinternaldafnytypes.SimplePositionalConfig) simplepositionaltypes.SimplePositionalConfig {
	return simplepositionaltypes.SimplePositionalConfig{}

}
