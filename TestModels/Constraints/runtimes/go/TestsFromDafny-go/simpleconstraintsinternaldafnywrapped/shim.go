// Code generated by smithy-go-codegen DO NOT EDIT.

package simpleconstraintsinternaldafnywrapped

import (
	"context"
	"fmt"
	"unicode/utf8"

	"github.com/dafny-lang/DafnyRuntimeGo/dafny"

	// "reflect"

	"github.com/Smithy-dafny/TestModels/Constraints/simpleconstraints"
	"github.com/Smithy-dafny/TestModels/Constraints/simpleconstraintsinternaldafnytypes"
	"github.com/Smithy-dafny/TestModels/Constraints/simpleconstraintstypes"
	"github.com/dafny-lang/DafnyStandardLibGo/Wrappers"
)

type Shim struct {
	simpleconstraintsinternaldafnytypes.ISimpleConstraintsClient
	client *simpleconstraints.Client
}

func WrappedSimpleConstraints(inputConfig simpleconstraintsinternaldafnytypes.SimpleConstraintsConfig) Wrappers.Result {
	var nativeConfig = simpleconstraints.SimpleConstraintsConfig_FromDafny(inputConfig)
	var nativeClient, nativeError = simpleconstraints.NewClient(nativeConfig)
	if nativeError != nil {
		return Wrappers.Companion_Result_.Create_Failure_(simpleconstraintsinternaldafnytypes.Companion_Error_.Create_Opaque_(nativeError))
	}
	return Wrappers.Companion_Result_.Create_Success_(&Shim{client: nativeClient})
}

func validateUTFBytes(input simpleconstraintsinternaldafnytypes.GetConstraintsInput) error {
	var errorOutput error
	errorOutput = validateUTFByte(input.Dtor_MyUtf8Bytes().UnwrapOr(nil))
	if (errorOutput != nil) {
		return errorOutput
	}
    //List can be done like this
	var immutableArray = input.Dtor_MyListOfUtf8Bytes().UnwrapOr(nil).(*dafny.ArraySequence).ToArray()
    //map like this
    input.Dtor_MyMap().UnwrapOr(nil).(dafny.Map).Keys()
    // What about other shape? Should we handle each and every shape?
    // What if shape in like this
        // Struture -> Structure -> Union -> Structure -> UTFBytes
    // Have to replicate all the steps (From Shim/APIclient to ToNative)
    // Can we use shapevisitor here?
        // No, Shape visitor return string with a function that will convert the shape to native. 
        // If we use shape visitor and convert shape to native there will be no point of validate UTF bytes.
    // Can we use types.go?
        // No, this has to be checked before converting to the native type (which happens first at Shim)
	
	for i := uint32(0); i < immutableArray.Length(); i++ {
		var errorOutput = validateUTFByte(immutableArray.Select(i))
		if (errorOutput != nil) {
			return errorOutput
		}
	}

	// fmt.Println(input.Dtor_MyListOfUtf8Bytes().UnwrapOr(nil).(*dafny.ArraySequence).ToArray().Select(0))
	// validateUTFByte(input.Dtor_MyListOfUtf8Bytes().UnwrapOr(nil).(*dafny.ArraySequence).ToArray().Select(0))
	// errorOutput = validateUTFByte(input.Dtor_MyListOfUtf8Bytes().UnwrapOr(nil).(*dafny.ArraySequence).ToArray().Select(0))
	// if (errorOutput != nil) {
	// 	return errorOutput
	// }
	return nil
}

func validateUTFByte(input interface{}) error {
	switch v := input.(type) {
	case *dafny.ArraySequence:
		if utf8.Valid(v.ToByteArray()) == false {
	
			opaqueErr := &simpleconstraintstypes.OpaqueError{
				ErrObject: fmt.Errorf("Invalid"),
			}
			
			return opaqueErr
		}
	case *dafny.LazySequence:
		// fmt.Println(reflect.TypeOf(v))
		if utf8.Valid(v.ToByteArray()) == false {
	
			opaqueErr := &simpleconstraintstypes.OpaqueError{
				ErrObject: fmt.Errorf("Invalid"),
			}
			
			return opaqueErr
		}
	default:
		panic(fmt.Sprintf("validateUTFBytes failed: unexpected type."))
}
return nil
}


func (shim *Shim) GetConstraints(input simpleconstraintsinternaldafnytypes.GetConstraintsInput) Wrappers.Result {

    defer func() {
        if r := recover(); r != nil {
            fmt.Println("Recovered. Error:\n", r)
        }
    }()
    // fmt.Println(input.Dtor_MyUtf8Bytes().UnwrapOr(nil))
    // fmt.Println(reflect.TypeOf(input.Dtor_MyUtf8Bytes().UnwrapOr(nil)))
	// fmt.Println(input.Dtor_MyUtf8Bytes().UnwrapOr(nil).(*dafny.ArraySequence).ToArray())
    
	var utfbytes_error = validateUTFBytes(input);

	if (utfbytes_error != nil) {
		return Wrappers.Companion_Result_.Create_Failure_(utfbytes_error)
	}
 
    
    
	var native_request = simpleconstraints.GetConstraintsInput_FromDafny(input)
	var native_response, native_error = shim.client.GetConstraints(context.Background(), native_request)
	if native_error != nil {
		return Wrappers.Companion_Result_.Create_Failure_(simpleconstraints.Error_ToDafny(native_error))
	}
	return Wrappers.Companion_Result_.Create_Success_(simpleconstraints.GetConstraintsOutput_ToDafny(*native_response))
}
